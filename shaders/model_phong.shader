#shader vertex#version 330 corelayout(location = 0) in vec3 v_position;layout(location = 1) in vec3 v_normalIn;layout(location = 2) in vec2 v_texCoordIn;out vec3 v_normal;out vec2 v_texCoord;out vec3 v_fragPos;uniform mat4 u_modelTransform;uniform mat4 u_viewTransform;uniform mat4 u_projectionTransform;uniform mat4 u_TransposeInverse;void main(){   gl_Position = u_projectionTransform * u_viewTransform * u_modelTransform * vec4(v_position, 1);   v_fragPos = vec3(u_modelTransform * vec4(v_position, 1));   v_normal = mat3(u_TransposeInverse) * v_normalIn;   v_texCoord = v_texCoordIn;};#shader fragment#version 330 corelayout(location = 0) out vec4 FragColor;in vec2 v_texCoord;in vec3 v_normal;in vec3 v_fragPos;uniform sampler2D u_Texture;uniform vec3 u_ambientLightColor;uniform float u_ambientLightIntensity;uniform vec3 u_lightPosition;uniform vec3 u_lightColor;uniform float u_lightIntensity;uniform vec3 u_viewerPos;void main(){	float specularIntensity = 0.5;	vec3 rayDirect = normalize(u_lightPosition - v_fragPos);	vec3 viewDir = normalize(u_viewerPos - v_fragPos);	vec3 reflectDir = reflect(-rayDirect, v_normal);  	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);	vec3 specular = specularIntensity * spec * u_lightColor;  	vec3 diffuse = max(dot(normalize(v_normal), rayDirect), 0.0) * u_lightColor;	FragColor = vec4(u_ambientLightColor * u_ambientLightIntensity + diffuse  + specular, 1.0) * texture(u_Texture, v_texCoord);};