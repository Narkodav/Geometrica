#shader vertex#version 430 coreconst mat4 FACE_MATRICES[6] = mat4[6](    // Front face (X+)    mat4(        1.0,  0.0,  0.0,  0.0,        0.0,  1.0,  0.0,  0.0,        0.0,  0.0,  1.0,  0.0,        0.0,  0.0,  0.0,  1.0    ),    // Right face (Z+)    mat4(        0.0,  0.0,  1.0,  0.0,        0.0,  1.0,  0.0,  0.0,       -1.0,  0.0,  0.0,  0.0,        0.0,  0.0,  0.0,  1.0    ),    // Top face (Y+)    mat4(        0.0,  1.0,  0.0,  0.0,       -1.0,  0.0,  0.0,  0.0,        0.0,  0.0,  1.0,  0.0,        0.0,  0.0,  0.0,  1.0    ),        // Back face (X-)    mat4(       -1.0,  0.0,  0.0,  0.0,        0.0,  1.0,  0.0,  0.0,        0.0,  0.0, -1.0,  0.0,        0.0,  0.0,  0.0,  1.0    ),        // Left face (Z-)    mat4(        0.0,  0.0, -1.0,  0.0,        0.0,  1.0,  0.0,  0.0,        1.0,  0.0,  0.0,  0.0,        0.0,  0.0,  0.0,  1.0    ),        // Bottom face (Y-)    mat4(        0.0, -1.0,  0.0,  0.0,        1.0,  0.0,  0.0,  0.0,        0.0,  0.0,  1.0,  0.0,        0.0,  0.0,  0.0,  1.0    ));//globallayout(location = 0) in vec3 inPosition;//per instancelayout(location = 1) in vec3 inTranspos;layout(location = 2) in uint inAtlasIndex;layout(location = 3) in uint inFaceIndex;out vec2 UV;layout(std430, binding = 0) buffer textureData{    vec4 data[];};uniform mat4 u_viewTransform;uniform mat4 u_projectionTransform;uniform float u_delta;void main(){    vec3 positionWithDelta = vec3(inPosition.x + u_delta, inPosition.y, inPosition.z);    vec4 rotatedPos = FACE_MATRICES[inFaceIndex] * vec4(positionWithDelta, 1.0);    vec3 worldPos = rotatedPos.xyz + inTranspos;    gl_Position = u_projectionTransform * u_viewTransform * vec4(worldPos, 1.0);    vec2 uv = inPosition.zy + vec2(0.5);    // Apply atlas transformation    UV = data[inAtlasIndex].zw + uv * data[inAtlasIndex].xy;};#shader fragment#version 430 corelayout(location = 0) out vec4 outFragColor;in vec2 UV;uniform sampler2D u_Texture;vec3 adjustContrastLuminance(vec3 color, float contrast) {    float luminance = dot(color, vec3(0.299, 0.587, 0.114));    vec3 luminanceColor = vec3(luminance);    return mix(luminanceColor, color, contrast);}void main(){    outFragColor = texture(u_Texture, UV);    vec3 color = adjustContrastLuminance(outFragColor.xyz, 2.0);    outFragColor = vec4(color, outFragColor.w);};